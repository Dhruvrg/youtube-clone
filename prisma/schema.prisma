datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    description   String?
    subscribers   Int       @default(0)
    plan          Plan      @default(Basic)

    customerId String? @unique

    Subscription Subscription?

    videos     Video[]
    liked      Liked[]
    history    History[]
    watchLater WatchLater[]
}

model Subscription {
    id     String             @id @default(cuid()) @map("_id")
    userId String             @unique @db.ObjectId
    plan   Plan
    period SubscriptionPeriod

    startDate DateTime @default(now())
    endDate   DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User User @relation(fields: [userId], references: [id])
}

enum SubscriptionPeriod {
    monthly
    yearly
}

enum Plan {
    Basic
    Standard
    Premium
}

model Video {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    likes       Int      @default(0)
    Dislikes    Int      @default(0)
    Views       Int      @default(0)
    userId      String   @db.ObjectId
    date        DateTime @default(now())
    title       String?
    description String?
    url         String?
    name        String?
    image       String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    comments Comment[]
}

model Comment {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    messaage String?
    date     DateTime @default(now())
    videoId  String   @db.ObjectId
    userId   String   @db.ObjectId
    likes    Int      @default(0)
    Dislikes Int      @default(0)

    video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Liked {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    userId  String   @db.ObjectId
    videoId String   @db.ObjectId
    date    DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model History {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    userId  String   @db.ObjectId
    videoId String   @db.ObjectId
    date    DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WatchLater {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    userId  String   @db.ObjectId
    videoId String   @db.ObjectId
    date    DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}
